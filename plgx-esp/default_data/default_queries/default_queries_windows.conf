{
  "schedule": {
    "appcompat_shims": {
      "query": "select ach.*,(select sha1 from win_hash wh where wh.path=ach.path limit 1 ) as sha1 from appcompat_shims ach;",
      "interval": 3600,
      "platform": "windows",
      "version": "2.9.0",
      "description": "Windows scheduled_tasks",
      "value": "Scheduled tasks",
      "removed": false
    },
    "arp_cache": {
      "query": "select * from arp_cache;",
      "interval": 86400,
      "platform": "windows",
      "version": "2.9.0",
      "description": "Address resolution cache, both static and dynamic (from ARP, NDP).",
      "value": "Address resolution cache, both static and dynamic (from ARP, NDP).",
      "removed": false
    },
    "azure_instance_metadata": {
      "query": "SELECT * FROM azure_instance_metadata;",
      "interval": 3600,
      "description": "Azure instance metadata.",
      "status": false
    },
    "azure_instance_tags": {
      "query": "SELECT * FROM azure_instance_tags;",
      "interval": 3600,
      "description": "Azure instance tags.",
      "status": false
    },
    "certificates": {
      "query": "select common_name, issuer, self_signed, not_valid_after, path from certificates;",
      "interval": 3600,
      "description": "List all certificates in the trust store",
      "removed": false
    },
    "chocolatey_packages": {
      "query": "SELECT * FROM chocolatey_packages;",
      "interval": 3600,
      "description": "List installed Chocolatey packages"
    },
    "chrome_extensions": {
      "query": "select * from chrome_extensions where uid in (select uid from users where username in (select user from logged_in_users));",
      "interval": 86400,
      "platform": "windows",
      "version": "2.9.0",
      "description": "Extensions in the Chrome browser",
      "value": "Chrome Extensions",
      "removed": false
    },
    "drivers": {
      "query": "select * from drivers;",
      "interval": 86400,
      "platform": "windows",
      "version": "2.9.0",
      "description": "Windows Drivers",
      "value": "Installed drivers",
      "removed": false
    },
    "dns_cache": {
      "query": "select * from dns_cache;",
      "interval": 600,
      "platform": "windows",
      "version": "2.9.0",
      "description": "Enumerate the DNS cache using the undocumented DnsGetCacheDataTable function in dnsapi.dll.",
      "value": "Enumerate the DNS cache using the undocumented DnsGetCacheDataTable function in dnsapi.dll.",
      "removed": false
    },
    "ec2_instance_metadata": {
      "query": "SELECT * FROM ec2_instance_metadata;",
      "interval": 3600,
      "description": "Retrieve the EC2 metadata for this endpoint",
      "status": false
    },
    "ec2_instance_tags": {
      "query": "SELECT * FROM ec2_instance_tags;",
      "interval": 3600,
      "description": "Retrieve the EC2 tags for this endpoint",
      "status": false
    },
    "etc_hosts": {
      "query": "select * from etc_hosts;",
      "interval": 3600,
      "platform": "windows",
      "version": "2.9.0",
      "description": "Host file entries",
      "value": "Windows Host File Entries",
      "removed": false
    },
    "ie_extensions": {
      "query": "select iee.*,(select sha1 from win_hash wh where wh.path=iee.path limit 1 ) as sha1  from ie_extensions iee where (iee.path is not null and iee.path!='');",
      "interval": 86400,
      "platform": "windows",
      "version": "2.9.0",
      "description": "Extensions in the Internet Explorer",
      "value": "IE Extensions",
      "removed": false
    },
    "kernel_info": {
      "query": "select path, version, arguments from kernel_info;",
      "interval": 3600,
      "platform": "windows",
      "version": "2.9.0",
      "description": "Kernel Info",
      "value": "Kernel Info",
      "removed": false
    },
    "os_version": {
      "query": "select * from os_version;",
      "interval": 3600,
      "platform": "windows",
      "version": "2.9.0",
      "description": "os_version",
      "value": "OS version",
      "removed": false
    },
    "osquery_extensions_snapshot": {
      "query": "select type, name, version from osquery_extensions;",
      "interval": 86400,
      "snapshot": true,
      "description": "Snapshot query to find out the versions of osquery and extensions running in agent",
      "status": true
    },
    "osquery_extensions": {
      "query": "select type, name, version from osquery_extensions;",
      "interval": 300,
      "snapshot": false,
      "description": "Query to find out the versions of osquery and extensions running in agent",
      "status": true
    },
    "osquery_info": {
      "query": "SELECT * FROM osquery_info;",
      "interval": 28800,
      "description": "Information about the resident osquery process"
    },
    "patches": {
      "query": "select hotfix_id, description, installed_on from patches;",
      "interval": 3600,
      "platform": "windows",
      "version": "2.9.0",
      "description": "Windows Patches",
      "value": "Installed Patches",
      "removed": false
    },
    "powershell_events": {
      "query": "select *,length(script_text) as script_length from powershell_events;",
      "interval": 300,
      "platform": "windows",
      "version": "2.9.0",
      "description": "Power Shell Events",
      "value": "Power Shell Events",
      "removed": false,
      "status": false
    },
    "process_memory_open_sockets": {
      "query": "select proc.pid,proc.parent,proc.path as process_path, proc.cmdline,proc.cwd,pmp.path as image_path,pos.remote_port,pos.remote_address,pos.local_port,pos.local_address,u.username from processes proc left join process_memory_map pmp on proc.pid=pmp.pid left join process_open_sockets pos on proc.pid=pos.pid left join users u on proc.uid=u.uid  WHERE pos.remote_address NOT IN ('0.0.0.0', '::', '') AND pos.remote_address NOT LIKE '10.%' AND pos.remote_address NOT LIKE '192.168.%' group by pmp.pid,pmp.path ;",
      "interval": 3600,
      "status": false
    },
    "process_open_sockets": {
      "query": "SELECT DISTINCT(processes.pid), processes.parent, processes.name, processes.path, processes.cmdline, processes.cwd, processes.root, processes.uid, processes.gid, processes.start_time, process_open_sockets.remote_address, process_open_sockets.remote_port, (SELECT cmdline FROM processes AS parent_cmdline WHERE pid=processes.parent) AS parent_cmdline FROM processes JOIN process_open_sockets USING (pid)  WHERE remote_address NOT IN ('0.0.0.0', '::', '') AND remote_address NOT LIKE '10.%' AND remote_address NOT LIKE '192.168.%';",
      "interval": 600,
      "description": "Find all processes that have open sockets",
      "status": false
    },
    "programs": {
      "query": "SELECT * FROM programs;",
      "interval": 3600,
      "description": "Lists installed programs"
    },
    "scheduled_tasks": {
      "query": "select name,action,path,enabled,datetime(next_run_time,'unixepoch','UTC') as next_run_time from scheduled_tasks;",
      "interval": 3600,
      "platform": "windows",
      "version": "2.9.0",
      "description": "Windows scheduled_tasks",
      "value": "Scheduled tasks",
      "removed": false
    },
    "services": {
      "query": "SELECT * FROM services WHERE start_type='DEMAND_START' OR start_type='AUTO_START';",
      "interval": 3600,
      "description": "Lists all installed services configured to start automatically at boot"
    },
    "shared_resources": {
      "query": "SELECT * FROM shared_resources;",
      "interval": 3600,
      "description": "Displays shared resources on a computer system running Windows. This may be a disk drive, printer, interprocess communication, or other sharable device."
    },
    "shimcache": {
      "query": "SELECT * FROM shimcache;",
      "interval": 3600,
      "description": "Application Compatibility Cache, contains artifacts of execution.",
      "status": false
    },
    "startup_items": {
      "query": "select name, path, status from win_startup_items;",
      "interval": 86400,
      "platform": "windows",
      "version": "2.9.0",
      "description": "Windows Startup Items",
      "value": "Startup Items",
      "removed": false
    },
    "system_info": {
      "query": "SELECT * FROM system_info;",
      "interval": 3600,
      "description": "System information for identification."
    },
    "uptime": {
      "query": "SELECT * FROM uptime;",
      "interval": 3600,
      "description": "System uptime"
    },
    "users": {
      "query": "SELECT * FROM users;",
      "interval": 3600,
      "description": "Local system users."
    },
    "win_epp_table": {
      "query": "select * from win_epp_table;",
      "interval": 360,
      "platform": "windows",
      "version": "2.9.0",
      "description": "Endpoint Products Status",
      "value": "Endpoint Products Status",
      "removed": false
    },
    "winbaseobj": {
      "query": "SELECT * from winbaseobj;",
      "interval": 600,
      "description": "Lists named Windows objects in the default object directories, across all terminal services sessions"
    },
    "windows_crashes": {
      "query": "SELECT * FROM windows_crashes;",
      "interval": 3600,
      "description": "Extracted information from Windows crash logs (Minidumps).",
      "removed": false
    },
    "windows_real_time_events": {
      "query": "select * from windows_events_table_optimized;",
      "interval": 30,
      "description": "PolyLogyx Real Time windows events",
      "status": true
    },
    "windows_security_status": {
      "query": "select * from windows_security_products;",
      "interval": 300,
      "snapshot": false,
      "description": "Snapshot query to fetch the windows defender status",
      "status": false
    },
    "wmi_cli_event_consumers": {
      "query": "SELECT * FROM wmi_cli_event_consumers;",
      "interval": 3600,
      "description": "WMI CommandLineEventConsumer, which can be used for persistence on Windows."
    },
    "wmi_event_filters": {
      "query": "SELECT * FROM wmi_event_filters;",
      "interval": 3600,
      "description": "Lists WMI event filters."
    },
    "wmi_filter_consumer_binding": {
      "query": "SELECT * FROM wmi_filter_consumer_binding;",
      "interval": 3600,
      "description": "Lists the relationship between event consumers and filters."
    },
    "wmi_script_event_consumers": {
      "query": "SELECT * FROM wmi_script_event_consumers;",
      "interval": 3600,
      "description": "WMI ActiveScriptEventConsumer, which can be used for persistence on Windows"
    },
    "win_mem_perf": {
      "query": "SELECT * FROM win_mem_perf;",
      "interval": 3600,
      "description": "System memory usage",
      "status": false
    },
    "win_process_perf": {
      "query": "SELECT * FROM win_process_perf;",
      "interval": 3600,
      "description": "Memory usage and other stats of each process",
      "status": false
    }
  }
}