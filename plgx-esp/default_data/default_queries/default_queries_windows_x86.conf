{
  "schedule": {
    "appcompat_shims": {
      "query": "SELECT * FROM appcompat_shims WHERE description!='EMET_Database' AND executable NOT IN ('setuphost.exe','setupprep.exe','iisexpress.exe');",
      "interval": 3600,
      "description": "Appcompat shims (.sdb files) installed on Windows hosts."
    },
    "certificates": {
      "query": "SELECT * FROM certificates WHERE path!='Other People';",
      "interval": 3600,
      "description": "List all certificates in the trust store",
      "removed": false
    },
    "chocolatey_packages": {
      "query": "SELECT * FROM chocolatey_packages;",
      "interval": 3600,
      "description": "List installed Chocolatey packages"
    },
    "chrome_extensions": {
      "query": "SELECT * FROM users CROSS JOIN chrome_extensions USING (uid);",
      "interval": 3600,
      "description": "List installed Chrome Extensions for all users"
    },
    "drivers": {
      "query": "SELECT * FROM drivers;",
      "interval": 3600,
      "description": "List in-use Windows drivers"
    },
    "etc_hosts": {
      "query": "SELECT * FROM etc_hosts;",
      "interval": 3600,
      "description": "List the contents of the Windows hosts file"
    },
    "ie_extensions": {
      "query": "SELECT * FROM ie_extensions;",
      "interval": 3600,
      "description": "List installed Internet Explorer extensions"
    },
    "kernel_info": {
      "query": "SELECT * FROM kernel_info;",
      "interval": 3600,
      "description": "List the kernel path, version, etc."
    },
    "os_version": {
      "query": "SELECT * FROM os_version;",
      "interval": 3600,
      "description": "List the version of the resident operating system"
    },
    "osquery_info": {
      "query": "SELECT * FROM osquery_info;",
      "interval": 28800,
      "description": "Information about the resident osquery process"
    },
    "patches": {
      "query": "SELECT * FROM patches;",
      "interval": 3600,
      "description": "Lists all the patches applied",
      "removed": false
    },
    "pipes": {
      "query": "SELECT processes.path, processes.cmdline, processes.uid, processes.on_disk, pipes.name, pid FROM pipes JOIN processes USING (pid);",
      "interval": 3600,
      "description": "Named and Anonymous pipes.",
      "removed": false
    },
    "programs": {
      "query": "SELECT * FROM programs;",
      "interval": 3600,
      "description": "Lists installed programs"
    },
    "scheduled_tasks": {
      "query": "SELECT * FROM scheduled_tasks;",
      "interval": 3600,
      "description": "Lists all of the tasks in the Windows task scheduler"
    },
    "services": {
      "query": "SELECT * FROM services WHERE start_type='DEMAND_START' OR start_type='AUTO_START';",
      "interval": 3600,
      "description": "Lists all installed services configured to start automatically at boot"
    },
    "shared_resources": {
      "query": "SELECT * FROM shared_resources;",
      "interval": 3600,
      "description": "Displays shared resources on a computer system running Windows. This may be a disk drive, printer, interprocess communication, or other sharable device."
    },
    "system_info": {
      "query": "SELECT * FROM system_info;",
      "interval": 3600,
      "description": "System information for identification."
    },
    "uptime": {
      "query": "SELECT * FROM uptime;",
      "interval": 3600,
      "description": "System uptime"
    },
    "users": {
      "query": "SELECT * FROM users;",
      "interval": 3600,
      "description": "Local system users."
    },
    "windows_crashes": {
      "query": "SELECT * FROM windows_crashes;",
      "interval": 3600,
      "description": "Extracted information from Windows crash logs (Minidumps).",
      "removed": false
    },
    "wmi_cli_event_consumers": {
      "query": "SELECT * FROM wmi_cli_event_consumers;",
      "interval": 3600,
      "description": "WMI CommandLineEventConsumer, which can be used for persistence on Windows. See https://www.blackhat.com/docs/us-15/materials/us-15-Graeber-Abusing-Windows-Management-Instrumentation-WMI-To-Build-A-Persistent%20Asynchronous-And-Fileless-Backdoor-wp.pdf for more details."
    },
    "wmi_event_filters": {
      "query": "SELECT * FROM wmi_event_filters;",
      "interval": 3600,
      "description": "Lists WMI event filters."
    },
    "wmi_filter_consumer_binding": {
      "query": "SELECT * FROM wmi_filter_consumer_binding;",
      "interval": 3600,
      "description": "Lists the relationship between event consumers and filters."
    },
    "wmi_script_event_consumers": {
      "query": "SELECT * FROM wmi_script_event_consumers;",
      "interval": 3600,
      "description": "WMI ActiveScriptEventConsumer, which can be used for persistence on Windows. See https://www.blackhat.com/docs/us-15/materials/us-15-Graeber-Abusing-Windows-Management-Instrumentation-WMI-To-Build-A-Persistent%20Asynchronous-And-Fileless-Backdoor-wp.pdf for more details."
    },
    "endpoint_security_tool_backend_server_registry_misconfigured": {
      "query": "SELECT * FROM registry WHERE path='HKEY_LOCAL_MACHINE\\Software\\EndpointSecurityTool\\BackendServerLocation' AND data!='https://expected_endpoint.local';",
      "interval": 3600,
      "description": "Returns the content of the key if the backend server does not match the expected value",
      "platform": "windows"
    },
    "endpoint_security_tool_not_running": {
      "query": "SELECT IFNULL(process_count,0) as process_exists FROM (SELECT count(*) as process_count from processes where path='/Applications/EndpointSecurityTool' OR lower(path)='c:\\endpointsecuritytool.exe') where process_exists!=1;",
      "interval": 28800,
      "description": "Returns an event if a EndpointSecurityTool process is not found running from /Applications/EndpointSecurityTool' (OSX) or 'c:\\endpointsecuritytool.exe' (Windows)",
      "platform": "windows,darwin",
      "snapshot": true
    },
    "backup_tool_not_running": {
      "query": "SELECT IFNULL(process_count,0) as process_exists FROM (SELECT count(*) as process_count from processes where path='/Applications/BackupTool' OR lower(path) LIKE 'c:\\backuptool.exe') where process_exists!=1;",
      "interval": 28800,
      "description": "Returns an event if a BackupTool process is not found running from '/Applications/BackupTool' (OSX) or 'c:\backuptool.exe' (Windows)",
      "platform": "windows,darwin",
      "snapshot": true
    },
    "process_open_sockets": {
      "query": "SELECT DISTINCT(processes.pid), processes.parent, processes.name, processes.path, processes.cmdline, processes.cwd, processes.root, processes.uid, processes.gid, processes.start_time, process_open_sockets.remote_address, process_open_sockets.remote_port, (SELECT cmdline FROM processes AS parent_cmdline WHERE pid=processes.parent) AS parent_cmdline FROM processes JOIN process_open_sockets USING (pid)  WHERE remote_address NOT IN ('0.0.0.0', '::', '') AND remote_address NOT LIKE '10.%' AND remote_address NOT LIKE '192.168.%';",
      "interval": 600,
      "description": "Find all processes that have open sockets"
    },
    "process_memory_open_sockets": {
      "query": "select proc.pid,proc.parent,proc.path as process_path, proc.cmdline,proc.cwd,pmp.path as image_path,pos.remote_port,pos.remote_address,pos.local_port,pos.local_address,u.username from processes proc left join process_memory_map pmp on proc.pid=pmp.pid left join process_open_sockets pos on proc.pid=pos.pid left join users u on proc.uid=u.uid  WHERE pos.remote_address NOT IN ('0.0.0.0', '::', '') AND pos.remote_address NOT LIKE '10.%' AND pos.remote_address NOT LIKE '192.168.%' group by pmp.pid,pmp.path ;",
      "interval": 3600,
      "status":false
    },
    "_osquery_version": {
      "query": "select version from osquery_info;",
      "interval": 10800,
      "snapshot": true,
      "status": true,
      "description": "Snapshot query to find out the osquery running in agent"
    }
  }
}