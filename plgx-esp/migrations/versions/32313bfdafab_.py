"""empty message

Revision ID: 32313bfdafab
Revises: f128c38a8779
Create Date: 2022-05-13 08:25:34.867077

"""

# revision identifiers, used by Alembic.
revision = '32313bfdafab'
down_revision = '2c10946cb492'

from alembic import op
import sqlalchemy as sa
from sqlalchemy import orm
import polylogyx.db.database
import flask_authorize
import sqlalchemy
import psycopg2

from sqlalchemy.dialects import postgresql


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint('alert_log_alert_id_fkey', 'alert_log', type_='foreignkey')
    op.drop_constraint('alerts_rule_id_fkey', 'alerts', type_='foreignkey')
    op.drop_constraint('alerts_node_id_fkey', 'alerts', type_='foreignkey')
    op.execute("alter table node_query_count rename to node_query_count_old;")
    op.create_table(
        "node_query_count",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("total_results", sa.Integer(), nullable=False),
        sa.Column("query_name", sa.String(), nullable=True),
        sa.Column("event_id", sa.String(), nullable=True),
        sa.Column("node_id", sa.Integer(), nullable=False),
        sa.Column('date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.execute("insert into node_query_count (node_id, event_id, query_name, total_results, date) select node_id, event_id, query_name, total_results, date from node_query_count_old;")
    op.drop_table('node_query_count_old')

    bind = op.get_bind()
    session = orm.Session(bind=bind)
    partitions = session.execute("""SELECT
            child.relname       AS partition_name
        FROM pg_inherits
            JOIN pg_class parent            ON pg_inherits.inhparent = parent.oid
            JOIN pg_class child             ON pg_inherits.inhrelid   = child.oid
            JOIN pg_namespace nmsp_parent   ON nmsp_parent.oid  = parent.relnamespace
            JOIN pg_namespace nmsp_child    ON nmsp_child.oid   = child.relnamespace
        WHERE parent.relname='result_log';""")

    for table in partitions:
        triggers = session.execute(f"SELECT trigger_name FROM information_schema.triggers where event_object_table='{table[0]}';")
        for trigger in triggers:
            session.execute(f"drop trigger if exists {trigger[0]} on {table[0]}")
    session.commit()
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # op.drop_column('node_query_count', 'id')
    op.create_foreign_key('alerts_node_id_fkey', 'alerts', 'node', ['node_id'], ['id'])
    op.create_foreign_key('alerts_rule_id_fkey', 'alerts', 'rule', ['rule_id'], ['id'])
    op.create_foreign_key('alert_log_alert_id_fkey', 'alert_log', 'alerts', ['alert_id'], ['id'], ondelete='CASCADE')
    # ### end Alembic commands ###
