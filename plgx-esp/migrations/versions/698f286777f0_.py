"""empty message

Revision ID: 698f286777f0
Revises: a76be8b92780
Create Date: 2018-09-10 15:11:38.552110

"""

# revision identifiers, used by Alembic.
revision = "698f286777f0"
down_revision = "a76be8b92780"

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql



def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "alert_distributed_query",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("alert_id", sa.String(), nullable=False),
        sa.Column("distributed_query_id", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "node_email",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("email_id", sa.String(), nullable=False),
        sa.Column("status", sa.String(), nullable=True),
        sa.Column("node_id", sa.Integer(), nullable=False),
        sa.Column("email_verified", sa.Boolean(), nullable=False),
        sa.Column("verification_token", sa.String(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["node_id"],
            ["node.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )

    op.create_table(
        "alert_email",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("alert_id", sa.Integer(), nullable=False),
        sa.Column("status", sa.String(), nullable=True),
        sa.Column("node_id", sa.Integer(), nullable=False),
        sa.Column("body", sa.String(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["alert_id"],
            ["alerts.id"],
        ),
        sa.ForeignKeyConstraint(
            ["node_id"],
            ["node.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.add_column(
        u"alerts", sa.Column("recon_queries", postgresql.JSONB(), nullable=True)
    )
    op.add_column(u"alerts", sa.Column("result_log_id", sa.String(), nullable=True))
    op.alter_column(
        u"alerts", "message", existing_type=postgresql.JSONB(), nullable=True
    )
    op.alter_column(u"alerts", "query_name", existing_type=sa.VARCHAR(), nullable=False)
    op.alter_column(u"alerts", "rule_id", existing_type=sa.INTEGER(), nullable=False)
    op.alter_column(
        u"carve_session", "carve_guid", existing_type=sa.VARCHAR(), nullable=False
    )
    op.alter_column(
        u"carve_session", "session_id", existing_type=sa.VARCHAR(), nullable=False
    )
    op.add_column(
        u"distributed_query", sa.Column("alert_id", sa.Integer(), nullable=True)
    )
    op.create_foreign_key(None, "distributed_query", "alerts", ["alert_id"], ["id"])
    op.add_column(
        u"distributed_query_task", sa.Column("data", postgresql.JSONB(), nullable=True)
    )

    op.alter_column(
        u"email_recipient", "status", existing_type=sa.VARCHAR(), nullable=False
    )
    op.alter_column(
        u"email_recipient",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
    )
    op.drop_constraint(
        u"email_recipient_recipient_key", "email_recipient", type_="unique"
    )

    op.alter_column(
        u"node_config", "apply_by_default", existing_type=sa.BOOLEAN(), nullable=False
    )
    op.alter_column(
        u"node_config", "config", existing_type=sa.VARCHAR(), nullable=False
    )

    op.alter_column(u"node_config", "name", existing_type=sa.VARCHAR(), nullable=False)

    op.alter_column(
        u"node_config",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
    )
    op.alter_column(
        u"node_data", "data", existing_type=postgresql.JSONB(), nullable=False
    )

    op.alter_column(u"options", "option", existing_type=sa.VARCHAR(), nullable=False)
    op.alter_column(
        u"options", "updated_at", existing_type=postgresql.TIMESTAMP(), nullable=False
    )
    op.drop_constraint(u"options_name_key", "options", type_="unique")

    op.add_column(
        u"rule", sa.Column("recon_queries", postgresql.JSONB(), nullable=True)
    )

    op.alter_column(u"settings", "setting", existing_type=sa.VARCHAR(), nullable=False)
    op.alter_column(
        u"settings", "updated_at", existing_type=postgresql.TIMESTAMP(), nullable=False
    )
    op.drop_constraint(u"settings_name_key", "settings", type_="unique")
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_unique_constraint(u"settings_name_key", "settings", ["name"])
    op.alter_column(
        u"settings", "updated_at", existing_type=postgresql.TIMESTAMP(), nullable=True
    )
    op.alter_column(u"settings", "setting", existing_type=sa.VARCHAR(), nullable=True)

    op.drop_column(u"rule", "recon_queries")

    op.create_unique_constraint(u"options_name_key", "options", ["name"])
    op.alter_column(
        u"options", "updated_at", existing_type=postgresql.TIMESTAMP(), nullable=True
    )
    op.alter_column(u"options", "option", existing_type=sa.VARCHAR(), nullable=True)

    op.alter_column(
        u"node_data", "data", existing_type=postgresql.JSONB(), nullable=True
    )
    op.alter_column(
        u"node_config",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
    )

    op.alter_column(u"node_config", "name", existing_type=sa.VARCHAR(), nullable=True)

    op.alter_column(u"node_config", "config", existing_type=sa.VARCHAR(), nullable=True)
    op.alter_column(
        u"node_config", "apply_by_default", existing_type=sa.BOOLEAN(), nullable=True
    )

    op.create_unique_constraint(
        u"email_recipient_recipient_key", "email_recipient", ["recipient"]
    )
    op.alter_column(
        u"email_recipient",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
    )
    op.alter_column(
        u"email_recipient", "status", existing_type=sa.VARCHAR(), nullable=True
    )

    op.drop_column(u"distributed_query_task", "data")
    op.drop_constraint(None, "distributed_query", type_="foreignkey")
    op.drop_column(u"distributed_query", "alert_id")
    op.alter_column(
        u"carve_session", "session_id", existing_type=sa.VARCHAR(), nullable=True
    )
    op.alter_column(
        u"carve_session", "carve_guid", existing_type=sa.VARCHAR(), nullable=True
    )
    op.alter_column(u"alerts", "rule_id", existing_type=sa.INTEGER(), nullable=True)
    op.alter_column(u"alerts", "query_name", existing_type=sa.VARCHAR(), nullable=True)
    op.alter_column(
        u"alerts", "message", existing_type=postgresql.JSONB(), nullable=False
    )
    op.drop_column(u"alerts", "result_log_id")
    op.drop_column(u"alerts", "recon_queries")
    op.drop_table("alert_email")
    op.drop_table("node_email")
    op.drop_table("alert_distributed_query")
    # ### end Alembic commands ###
