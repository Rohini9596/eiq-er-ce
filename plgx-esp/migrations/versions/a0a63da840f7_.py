"""empty message

Revision ID: a0a63da840f7
Revises: 02095e5181bd
Create Date: 2020-08-03 23:13:36.647041

"""

# revision identifiers, used by Alembic.
revision = 'a0a63da840f7'
down_revision = '02095e5181bd'

from alembic import op
import sqlalchemy as sa
import polylogyx.database
from sqlalchemy.dialects import postgresql


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('node_query_count',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('total_results', sa.Integer(), nullable=False),
                    sa.Column('query_name', sa.String(), nullable=True),
                    sa.Column('node_id', sa.Integer(), nullable=False),
                    sa.PrimaryKeyConstraint('id')
                    )

    op.execute("""CREATE or REPLACE FUNCTION node_query_count() RETURNS trigger
       LANGUAGE plpgsql AS
    $$BEGIN
       IF TG_OP = 'INSERT' and NEW.action != 'removed' THEN


          UPDATE node_query_count SET total_results = total_results + 1 where node_id=NEW.node_id and query_name=NEW.name;

           IF found THEN
                RETURN NEW;
           END IF;

           BEGIN
                INSERT INTO  node_query_count(total_results,node_id,query_name) VALUES (1,NEW.node_id, NEW.name);
                RETURN NEW;

           END;
       ELSIF TG_OP = 'DELETE' and OLD.action != 'removed' THEN

          UPDATE node_query_count SET total_results = total_results - 1 where node_id=OLD.node_id and query_name=OLD.name;
          DELETE from node_query_count where total_results=0;

          RETURN OLD;
       ELSE
          UPDATE node_query_count SET total_results = 0 where node_id=NEW.node_id and query_name=NEW.name;

          RETURN NULL;
       END IF;
    END;$$;
     """)
    op.execute("""
    CREATE  CONSTRAINT TRIGGER node_query_count_mod
   AFTER INSERT OR DELETE ON result_log
   DEFERRABLE INITIALLY DEFERRED
   FOR EACH ROW EXECUTE PROCEDURE node_query_count();
    """)

    op.execute("""
    CREATE TRIGGER node_query_count_trunc AFTER TRUNCATE ON node_query_count
   FOR EACH STATEMENT EXECUTE PROCEDURE node_query_count();
    """)
   #  op.execute("""
   #  INSERT INTO node_query_count(total_results,node_id,query_name)
   # SELECT count(*),node_id,name FROM result_log group by name,node_id;
   #  """)
    op.execute("COMMIT;")
    op.execute("CREATE UNIQUE INDEX CONCURRENTLY idx_result_log_node_name_desc ON public.result_log USING btree(name, node_id, id DESC);")


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute('drop trigger node_query_count_trunc;')
    op.execute('drop trigger node_query_count_mod;')
    op.execute("drop function if exists node_query_count;")
    op.drop_table('node_query_count')

    # ### end Alembic commands ###
