"""empty message

Revision ID: c0379b846404
Revises: 03277ebe1fbf
Create Date: 2021-07-18 11:18:44.285052

"""

# revision identifiers, used by Alembic.
revision = 'c0379b846404'
down_revision = '03277ebe1fbf'

from alembic import op
import sqlalchemy as sa
import polylogyx.db.database
from sqlalchemy.dialects import postgresql


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    op.add_column('result_log', sa.Column('created_at', sa.DateTime(), nullable=True))
    #op.execute("update result_log set created_at=timestamp;")
    op.execute("alter table result_log rename to result_log_old;")
    op.execute("alter table node_query_count rename to node_query_count_old;")

    op.execute("""CREATE TABLE public.node_query_count (
        total_results integer NOT NULL,
        query_name character varying,
        node_id integer NOT NULL,
        event_id character varying,
        date timestamp) ;""")
    op.execute(
        "CREATE TABLE public.result_log (id SERIAL ,name character varying NOT NULL,timestamp timestamp without time zone, action character varying,columns jsonb,node_id integer NOT NULL,uuid character varying,status integer,task_id character varying,created_at timestamp without time zone )partition by range (created_at);");
    #op.execute("INSERT INTO  result_log SELECT * FROM result_log_old ;")
    last_value=op.get_bind().execute('select last_value from result_log_id_seq').first()
    last_value=last_value[0]
    op.execute("create sequence result_log_seq start {0};".format(last_value))
    op.execute("alter table result_log alter id set default nextval('result_log_seq');")
    op.execute("""create or replace function createPartitionIfNotExists(created_at timestamp) returns void
as $body$
declare dayStart date := date_trunc('day', forDate);
    declare dayEnd date := dayStart + interval '1 day';

    declare tableName text := 'result_log_' || to_char(forDate, 'YYYYmmdd');
begin
    -- Check if the table we need for the supplied date exists.
    -- If it does not exist...:
    if to_regclass(tableName) is null then
        -- Generate a new table that acts as a partition for mytable:
        execute format('create table %I partition of result_log for values from (%L) to (%L)', tableName, dayStart, dayEnd);
        -- Adding all the indexes of result_log table to its partitions also
        execute format($$create index if not exists idx_%I_node_id_timestamp_desc on %I (node_id, timestamp DESC NULLS LAST)$$, tableName);
        execute format($$create index if not exists idx_%I_name on %I (name)$$, tableName);
        execute format($$create index if not exists idx_%I_on_columns_time_int on %I (cast (columns ->> 'time' as integer))$$, tableName);
        execute format($$create index if not exists idx_%I_on_columns_md5 on %I ((columns ->> 'md5'))$$, tableName);
        execute format($$create index if not exists idx_%I_on_columns_sha256 on %I ((columns ->> 'sha256'))$$, tableName);
        execute format($$create index if not exists idx_%I_on_columns_process_guid on %I ((columns ->> 'process_guid'))$$, tableName);
        execute format($$create index if not exists idx_%I_on_columns_parent_process_guid on %I ((columns ->> 'parent_process_guid'))$$, tableName);
        execute format($$create index if not exists idx_%I_on_columns_target_path on %I ((columns ->> 'target_path'))$$, tableName);
        execute format($$create index if not exists idx_%I_on_columns_target_name on %I ((columns ->> 'target_name'))$$, tableName);
        execute format($$create index if not exists idx_%I_on_columns_process_name on %I ((columns ->> 'process_name'))$$, tableName);
        execute format($$create index if not exists idx_%I_on_columns_remote_address on %I ((columns ->> 'remote_address'))$$, tableName);
        execute format($$create index if not exists idx_%I_on_columns_eventid on %I ((columns ->> 'eventid'))$$, tableName);
    end if;
end;
$body$ language plpgsql;


create or replace view result_log_view as select * from result_log;


create or replace rule autoCall_createPartitionIfNotExists as on insert
    to result_log_view
    do instead (
        select createPartitionIfNotExists(NEW.created_at);
        insert into result_log(name,timestamp,action,columns,node_id,uuid,status,task_id,created_at) values( NEW.name,NEW.timestamp,NEW.action,NEW.columns,NEW.node_id,NEW.uuid,NEW.status,NEW.task_id,NEW.created_at);

    );""")

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    op.drop_column('result_log', 'created_at')

    # ### end Alembic commands ###
