"""empty message

Revision ID: ca6badea9091
Revises: d39e8fda100e
Create Date: 2022-04-25 13:04:33.542162

"""

# revision identifiers, used by Alembic.
revision = 'ca6badea9091'
down_revision = 'd39e8fda100e'

from alembic import op
import sqlalchemy as sa
import polylogyx.db.database
import flask_authorize

from sqlalchemy.dialects import postgresql


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    op.drop_index('ix_file_path_tags_file_path.id', table_name='file_path_tags')
    op.drop_table('file_path_tags')
    op.drop_constraint('node_recon_data_node_data_id_fkey', 'node_recon_data')
    op.drop_table('node_data')
    op.drop_table('node_query_count_old')
    op.drop_table('dashboard_data')
    op.drop_table('distributed_query_result')
    op.drop_table('email_recipient')
    op.drop_table('node_recon_data')
    op.drop_index('idx_result_log_name', table_name='result_log_old')
    op.drop_index('idx_result_log_node_id_timestamp_desc', table_name='result_log_old')
    op.drop_table('result_log_old')
    op.drop_table('file_path')
    op.drop_table('released_agent_versions')
    op.drop_table('options')
    op.drop_table('phish_tank')

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    op.create_table('phish_tank',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('phish_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('verified', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('url', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('online', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('target', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='phish_tank_pkey')
    )
    op.create_table('options',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('option', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='options_pkey')
    )
    op.create_table('released_agent_versions',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('platform', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('platform_release', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('osquery_version', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('extension_version', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('extension_hash_md5', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('arch', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('osquery_hash_md5', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('cpt_version', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('cpt_hash_md5', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='released_agent_versions_pkey')
    )
    op.create_table('file_path',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('file_path_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('category', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('target_paths', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='file_path_pkey'),
    sa.UniqueConstraint('category', name='file_path_category_key'),
    postgresql_ignore_search_path=False
    )
    op.create_table('result_log_old',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('action', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('columns', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('node_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('uuid', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('status', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('task_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['node_id'], ['node.id'], name='result_log_node_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='result_log_pkey')
    )
    op.create_index('idx_result_log_node_id_timestamp_desc', 'result_log_old', ['node_id', 'timestamp'], unique=False)
    op.create_index('idx_result_log_name', 'result_log_old', ['name'], unique=False)
    op.create_table('node_recon_data',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('columns', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('node_data_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['node_data_id'], ['node_data.id'], name='node_recon_data_node_data_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='node_recon_data_pkey')
    )
    op.create_table('email_recipient',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('recipient', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='email_recipient_pkey')
    )
    op.create_table('distributed_query_result',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('columns', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('distributed_query_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('distributed_query_task_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['distributed_query_id'], ['distributed_query.id'], name='distributed_query_result_distributed_query_id_fkey'),
    sa.ForeignKeyConstraint(['distributed_query_task_id'], ['distributed_query_task.id'], name='distributed_query_result_distributed_query_task_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='distributed_query_result_pkey')
    )
    op.create_table('dashboard_data',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='dashboard_data_pkey')
    )
    op.create_table('node_query_count_old',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('total_results', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('query_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('node_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('event_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='node_query_count_pkey')
    )
    op.create_table('node_data',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('node_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['node_id'], ['node.id'], name='node_data_node_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='node_data_pkey')
    )
    op.create_table('file_path_tags',
    sa.Column('tag.id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('file_path.id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['file_path.id'], ['file_path.id'], name='file_path_tags_file_path.id_fkey'),
    sa.ForeignKeyConstraint(['tag.id'], ['tag.id'], name='file_path_tags_tag.id_fkey')
    )
    op.create_index('ix_file_path_tags_file_path.id', 'file_path_tags', ['file_path.id'], unique=False)

    # ### end Alembic commands ###
